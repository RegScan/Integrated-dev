# API网关配置文件
# 统一服务入口，负载均衡，请求路由优化

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # 上游服务器配置
    upstream config_manager {
        least_conn;
        server config-manager:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream website_scanner {
        least_conn;
        server website-scanner:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream alert_handler {
        least_conn;
        server alert-handler:8002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream task_scheduler {
        least_conn;
        server task-scheduler:8003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream web_admin {
        least_conn;
        server web-admin:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # 健康检查配置
    upstream_conf {
        zone upstream_dynamic 64k;
    }
    
    # API网关主配置
    server {
        listen 8080;
        server_name localhost;
        
        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Web管理后台 (前端静态资源)
        location / {
            proxy_pass http://web_admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 缓存配置
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # API路由 - 配置管理服务
        location /api/config/ {
            rewrite ^/api/config/(.*)$ /api/v1/$1 break;
            proxy_pass http://config_manager;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 用户认证 (由配置管理服务处理)
        location /api/auth/ {
            rewrite ^/api/auth/(.*)$ /api/v1/auth/$1 break;
            proxy_pass http://config_manager;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 网站扫描服务
        location /api/scan/ {
            rewrite ^/api/scan/(.*)$ /api/v1/$1 break;
            proxy_pass http://website_scanner;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 扫描结果
        location /api/results/ {
            rewrite ^/api/results/(.*)$ /api/v1/results/$1 break;
            proxy_pass http://website_scanner;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 告警处理服务
        location /api/alerts/ {
            rewrite ^/api/alerts/(.*)$ /api/v1/alerts/$1 break;
            proxy_pass http://alert_handler;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 告警规则
        location /api/alert-rules/ {
            rewrite ^/api/alert-rules/(.*)$ /api/v1/alert-rules/$1 break;
            proxy_pass http://alert_handler;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 告警处置动作
        location /api/actions/ {
            rewrite ^/api/actions/(.*)$ /api/v1/actions/$1 break;
            proxy_pass http://alert_handler;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 任务调度服务
        location /api/tasks/ {
            rewrite ^/api/tasks/(.*)$ /api/v1/tasks/$1 break;
            proxy_pass http://task_scheduler;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 任务调度
        location /api/schedules/ {
            rewrite ^/api/schedules/(.*)$ /api/v1/schedules/$1 break;
            proxy_pass http://task_scheduler;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 系统管理
        location /api/system/ {
            rewrite ^/api/system/(.*)$ /api/v1/system/$1 break;
            proxy_pass http://config_manager;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 用户管理
        location /api/users/ {
            rewrite ^/api/users/(.*)$ /api/v1/users/$1 break;
            proxy_pass http://config_manager;
            include /etc/nginx/proxy_params;
        }
        
        # API路由 - 通用健康检查
        location ~ ^/api/health/(.+)$ {
            set $service $1;
            if ($service = "config") {
                rewrite ^(.*)$ /health break;
                proxy_pass http://config_manager;
            }
            if ($service = "scanner") {
                rewrite ^(.*)$ /health break;
                proxy_pass http://website_scanner;
            }
            if ($service = "alert") {
                rewrite ^(.*)$ /health break;
                proxy_pass http://alert_handler;
            }
            if ($service = "task") {
                rewrite ^(.*)$ /health break;
                proxy_pass http://task_scheduler;
            }
            include /etc/nginx/proxy_params;
        }
        
        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error":"Not Found","message":"请求的资源不存在"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error":"Internal Server Error","message":"服务器内部错误"}';
            add_header Content-Type application/json;
        }
    }
    
    # 开发环境配置 (用于直接访问各服务)
    server {
        listen 8081;
        server_name localhost;
        
        location / {
            return 200 '{"message":"API Gateway Development Mode","services":{"config":"8000","scanner":"8001","alert":"8002","task":"8003","admin":"3000"}}';
            add_header Content-Type application/json;
        }
        
        # 配置管理服务
        location /config/ {
            rewrite ^/config/(.*)$ /$1 break;
            proxy_pass http://config_manager;
            include /etc/nginx/proxy_params;
        }
        
        # 网站扫描服务
        location /scanner/ {
            rewrite ^/scanner/(.*)$ /$1 break;
            proxy_pass http://website_scanner;
            include /etc/nginx/proxy_params;
        }
        
        # 告警处理服务
        location /alert/ {
            rewrite ^/alert/(.*)$ /$1 break;
            proxy_pass http://alert_handler;
            include /etc/nginx/proxy_params;
        }
        
        # 任务调度服务
        location /task/ {
            rewrite ^/task/(.*)$ /$1 break;
            proxy_pass http://task_scheduler;
            include /etc/nginx/proxy_params;
        }
    }
}

# 代理参数文件内容 (如果不存在则内联)
# proxy_set_header Host $host;
# proxy_set_header X-Real-IP $remote_addr;
# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# proxy_set_header X-Forwarded-Proto $scheme;
# proxy_connect_timeout 30s;
# proxy_send_timeout 30s;
# proxy_read_timeout 30s;
# proxy_buffering on;
# proxy_buffer_size 4k;
# proxy_buffers 8 4k;